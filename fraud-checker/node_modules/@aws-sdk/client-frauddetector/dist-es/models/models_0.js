import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { FraudDetectorServiceException as __BaseException } from "./FraudDetectorServiceException";
export class AccessDeniedException extends __BaseException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const AsyncJobStatus = {
    CANCELED: "CANCELED",
    CANCEL_IN_PROGRESS: "CANCEL_IN_PROGRESS",
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    IN_PROGRESS_INITIALIZING: "IN_PROGRESS_INITIALIZING",
};
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const DataSource = {
    EVENT: "EVENT",
    EXTERNAL_MODEL_SCORE: "EXTERNAL_MODEL_SCORE",
    MODEL_SCORE: "MODEL_SCORE",
};
export const DataType = {
    BOOLEAN: "BOOLEAN",
    DATETIME: "DATETIME",
    FLOAT: "FLOAT",
    INTEGER: "INTEGER",
    STRING: "STRING",
};
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const ModelTypeEnum = {
    ACCOUNT_TAKEOVER_INSIGHTS: "ACCOUNT_TAKEOVER_INSIGHTS",
    ONLINE_FRAUD_INSIGHTS: "ONLINE_FRAUD_INSIGHTS",
    TRANSACTION_FRAUD_INSIGHTS: "TRANSACTION_FRAUD_INSIGHTS",
};
export const RuleExecutionMode = {
    ALL_MATCHED: "ALL_MATCHED",
    FIRST_MATCHED: "FIRST_MATCHED",
};
export const DetectorVersionStatus = {
    ACTIVE: "ACTIVE",
    DRAFT: "DRAFT",
    INACTIVE: "INACTIVE",
};
export const UnlabeledEventsTreatment = {
    AUTO: "AUTO",
    FRAUD: "FRAUD",
    IGNORE: "IGNORE",
    LEGIT: "LEGIT",
};
export const TrainingDataSourceEnum = {
    EXTERNAL_EVENTS: "EXTERNAL_EVENTS",
    INGESTED_EVENTS: "INGESTED_EVENTS",
};
export const Language = {
    DETECTORPL: "DETECTORPL",
};
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const ModelSource = {
    SAGEMAKER: "SAGEMAKER",
};
export class ResourceUnavailableException extends __BaseException {
    name = "ResourceUnavailableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
    }
}
export const EventIngestion = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const ModelInputDataFormat = {
    CSV: "TEXT_CSV",
    JSON: "APPLICATION_JSON",
};
export const ModelEndpointStatus = {
    ASSOCIATED: "ASSOCIATED",
    DISSOCIATED: "DISSOCIATED",
};
export const ModelOutputDataFormat = {
    CSV: "TEXT_CSV",
    JSONLINES: "APPLICATION_JSONLINES",
};
export const ListUpdateMode = {
    APPEND: "APPEND",
    REMOVE: "REMOVE",
    REPLACE: "REPLACE",
};
export const ModelVersionStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
    TRAINING_CANCELLED: "TRAINING_CANCELLED",
};
export const CreateListRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.elements && { elements: SENSITIVE_STRING }),
});
export const CreateRuleRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: SENSITIVE_STRING }),
});
export const EntityFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.eventVariables && { eventVariables: SENSITIVE_STRING }),
    ...(obj.entities && { entities: SENSITIVE_STRING }),
});
export const GetEventResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.event && { event: EventFilterSensitiveLog(obj.event) }),
});
export const GetEventPredictionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.entities && { entities: SENSITIVE_STRING }),
    ...(obj.eventVariables && { eventVariables: SENSITIVE_STRING }),
    ...(obj.externalModelEndpointDataBlobs && { externalModelEndpointDataBlobs: SENSITIVE_STRING }),
});
export const EvaluatedExternalModelFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputVariables && { inputVariables: SENSITIVE_STRING }),
    ...(obj.outputVariables && { outputVariables: SENSITIVE_STRING }),
});
export const EventVariableSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.name && { name: SENSITIVE_STRING }),
    ...(obj.value && { value: SENSITIVE_STRING }),
    ...(obj.source && { source: SENSITIVE_STRING }),
});
export const EvaluatedRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: SENSITIVE_STRING }),
    ...(obj.expressionWithValues && { expressionWithValues: SENSITIVE_STRING }),
});
export const GetEventPredictionMetadataResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.eventVariables && {
        eventVariables: obj.eventVariables.map((item) => EventVariableSummaryFilterSensitiveLog(item)),
    }),
    ...(obj.rules && { rules: obj.rules.map((item) => EvaluatedRuleFilterSensitiveLog(item)) }),
    ...(obj.evaluatedExternalModels && {
        evaluatedExternalModels: obj.evaluatedExternalModels.map((item) => EvaluatedExternalModelFilterSensitiveLog(item)),
    }),
});
export const EventTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GetEventTypesResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.eventTypes && { eventTypes: SENSITIVE_STRING }),
});
export const GetListElementsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.elements && { elements: SENSITIVE_STRING }),
});
export const RuleDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: SENSITIVE_STRING }),
});
export const GetRulesResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ruleDetails && { ruleDetails: obj.ruleDetails.map((item) => RuleDetailFilterSensitiveLog(item)) }),
});
export const SendEventRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.eventVariables && { eventVariables: SENSITIVE_STRING }),
    ...(obj.entities && { entities: SENSITIVE_STRING }),
});
export const UpdateListRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.elements && { elements: SENSITIVE_STRING }),
});
export const UpdateRuleVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: SENSITIVE_STRING }),
});
